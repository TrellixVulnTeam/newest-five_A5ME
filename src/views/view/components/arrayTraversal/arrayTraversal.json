{
    "Title1": "@、数组遍历方法(12个)",
    "ArrayMethod1": [{
            "Count": "js中遍历数组并不会改变原始数组的方法总共有12个"
        },
        {
            "Count": "ES5："
        },
        {
            "Count": "forEach、every 、some、 fliter、map、reduce、reduceRight "
        },
        {
            "Count": "ES6："
        },
        {
            "Count": "find、findIndex、keys、values、entries"
        }
    ],
    "Title2": "@、forEach()",
    "ArrayMethod2": [{
            "Count": " 按升序为数组中含有效值的每一项执行一次回调函数"
        },
        {
            "Count": "语法："
        },
        {
            "Count": "array.forEach(function(currentValue, index, arr), thisValue) "
        },
        {
            "Count": "参数:"
        },
        {
            "Count": "function(必须): 数组中每个元素需要调用的函数"
        },
        {
            "Count": "currentValue(必须),数组当前元素的值"
        },
        {
            "Count": "index(可选), 当前元素的索引值"
        },
        {
            "Count": "arr(可选),数组对象本身"
        },
        {
            "Count": "hisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined"
        },
        {
            "Count": "关于forEach()你要知道："
        },
        {
            "Count": "无法中途退出循环，只能用return退出本次回调，进行下一次回调"
        },
        {
            "Count": "它总是返回 undefined值,即使你return了一个值"
        }
    ],
    "Title3": "@、every() 检测数组所有元素是否都符合判断条件",
    "ArrayMethod3": [{
            "Count": " 方法用于检测数组所有元素是否都符合函数定义的条件"
        },
        {
            "Count": "语法："
        },
        {
            "Count": "array.every(function(currentValue, index, arr), thisValue)"
        },
        {
            "Count": "参数:"
        },
        {
            "Count": "function(必须): 数组中每个元素需要调用的函数"
        },
        {
            "Count": "currentValue(必须),数组当前元素的值"
        },
        {
            "Count": "index(可选), 当前元素的索引值"
        },
        {
            "Count": "arr(可选),数组对象本身"
        },
        {
            "Count": "hisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined"
        },
        {
            "Count": "方法返回值规则:"
        },
        {
            "Count": "如果数组中检测到有一个元素不满足，则整个表达式返回 false，且剩余的元素不会再进行检测"
        },
        {
            "Count": "如果所有元素都满足条件，则返回 true"
        }
    ],
    "Title4": "@、some() 数组中的是否有满足判断条件的元素",
    "ArrayMethod4": [{
            "Count": " 数组中的是否有满足判断条件的元素"
        },
        {
            "Count": "语法："
        },
        {
            "Count": "array.some(function(currentValue, index, arr), thisValue)"
        },
        {
            "Count": "参数:"
        },
        {
            "Count": "function(必须): 数组中每个元素需要调用的函数"
        },
        {
            "Count": "currentValue(必须),数组当前元素的值"
        },
        {
            "Count": "index(可选), 当前元素的索引值"
        },
        {
            "Count": "arr(可选),数组对象本身"
        },
        {
            "Count": "hisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined"
        },
        {
            "Count": "方法返回值规则:"
        },
        {
            "Count": "如果有一个元素满足条件，则表达式返回true, 剩余的元素不会再执行检测"
        },
        {
            "Count": "如果没有满足条件的元素，则返回false"
        }
    ],
    "Title5": "@、filter() 过滤原始数组，返回新数组",
    "ArrayMethod5": [{
            "Count": " 返回一个新数组, 其包含通过所提供函数实现的测试的所有元素"
        },
        {
            "Count": "语法："
        },
        {
            "Count": "let new_array = arr.filter(function(currentValue, index, arr), thisArg)"
        },
        {
            "Count": "参数:"
        },
        {
            "Count": "function(必须): 数组中每个元素需要调用的函数"
        },
        {
            "Count": "currentValue(必须),数组当前元素的值"
        },
        {
            "Count": "index(可选), 当前元素的索引值"
        },
        {
            "Count": "arr(可选),数组对象本身"
        },
        {
            "Count": "hisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined"
        },
        {
            "Count": "EG"
        },
        {
            "Count": "let a = [32, 33, 16, 40];"
        },
        {
            "Count": "let result = a.filter(function (value, index, array) {"
        },
        {
            "Count": "return value >= 18; // 返回a数组中所有大于18的元素"
        },
        {
            "Count": "});"
        },
        {
            "Count": "console.log(result,a);// [32,33,40] [32,33,16,40]"
        }
    ],
    "Title6": "@、map() 对数组中的每个元素进行处理，返回新的数组",
    "ArrayMethod6": [{
            "Count": "创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果"
        },
        {
            "Count": "语法："
        },
        {
            "Count": "let new_array = arr.map(function(currentValue, index, arr), thisArg)"
        },
        {
            "Count": "参数:"
        },
        {
            "Count": "function(必须): 数组中每个元素需要调用的函数"
        },
        {
            "Count": "currentValue(必须),数组当前元素的值"
        },
        {
            "Count": "index(可选), 当前元素的索引值"
        },
        {
            "Count": "arr(可选),数组对象本身"
        },
        {
            "Count": "hisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined"
        },
        {
            "Count": "EG"
        },
        {
            "Count": "let a = ['1','2','3','4'];"
        },
        {
            "Count": "let result = a.map(function (value, index, array) {"
        },
        {
            "Count": " return value + '新数组的新元素'"
        },
        {
            "Count": "});"
        },
        {
            "Count": "console.log(result, a);"
        }
    ],
    "Title7": "@、reduce() 为数组提供累加器，合并为一个值",
    "ArrayMethod7": [{
            "Count": "reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，最终合并为一个值"
        },
        {
            "Count": "语法："
        },
        {
            "Count": "array.reduce(function(total, currentValue, currentIndex, arr), initialValue)"
        },
        {
            "Count": "参数:"
        },
        {
            "Count": " total(必须)，初始值, 或者上一次调用回调返回的值"
        },
        {
            "Count": " currentValue(必须),数组当前元素的值"
        },
        {
            "Count": "index(可选), 当前元素的索引值"
        },
        {
            "Count": "arr(可选),数组对象本身"
        },
        {
            "Count": "initialValue(可选): 指定第一次回调 的第一个参数"
        },
        {
            "Count": "回调第一次执行时:"
        },
        {
            "Count": "如果 initialValue 在调用 reduce 时被提供，那么第一个 total 将等于 initialValue，此时 currentValue 等于数组中的第一个值"
        },
        {
            "Count": "如果 initialValue 未被提供，那么 total 等于数组中的第一个值，currentValue 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError"
        },
        {
            "Count": " 如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么回调不会被执行，数组的唯一值将被返回"
        },
        {
            "Count": "eg:"
        },
        {
            "Count": "let sum = [0, 1, 2, 3].reduce(function (a, b) {"
        },
        {
            "Count": "return a + b;"
        },
        {
            "Count": "}, 0);"
        }
    ],
    "Title8": "@、reduceRight() 从右至左累加",
    "ArrayMethod8": [{
        "Count": "这个方法除了与reduce执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍"
    }],
    "Title9": "@、ES6：find()& findIndex() 根据条件找到数组成员",
    "ArrayMethod9": [{
            "Count": "find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回undefined"
        },
        {
            "Count": "findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1"
        },
        {
            "Count": "这两个方法"
        },
        {
            "Count": "let new_array = arr.find(function(currentValue, index, arr), thisArg):"
        },
        {
            "Count": "let new_array = arr.findIndex(function(currentValue, index, arr), thisArg)"
        },
        {
            "Count": "参数"
        },
        {
            "Count": "function(必须): 数组中每个元素需要调用的函数"
        },
        {
            "Count": "currentValue(必须),数组当前元素的值"
        },
        {
            "Count": "index(可选), 当前元素的索引值"
        },
        {
            "Count": "arr(可选),数组对象本身"
        },
        {
            "Count": "thisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined"
        },
        {
            "Count": "这两个方法都可以识别NaN,弥补了indexOf的不足."
        },
        {
            "Count": "eg:"
        },
        {
            "Count": "let a = [1, 4, -5, 10].find((n) => n < 0); // 返回元素-5"
        },
        {
            "Count": "let a = [1, 4, -5, 10].findIndex((n) => n < 0); // 返回索引2"
        }
    ],
    "Title10": "@、ES6 keys()&values()&entries() 遍历键名、遍历键值、遍历键名+键值",
    "ArrayMethod10": [{
            "Count": "三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值"
        },
        {
            "Count": "语法："
        },
        {
            "Count": "array.keys()"
        },
        {
            "Count": "array.values()"
        },
        {
            "Count": "array.entries()"
        },
        {
            "Count": "参数：无"
        },
        {
            "Count": "遍历栗子"
        },
        {
            "Count": "for (let index of ['a', 'b'].keys()) {"
        },
        {
            "Count": "console.log(index);"
        },
        {
            "Count": "}"
        },
        {
            "Count": "// 0"
        },
        {
            "Count": "// 1"
        },
        {
            "Count": "for (let elem of ['a', 'b'].values()) {:"
        },
        {
            "Count": "console.log(elem);"
        },
        {
            "Count": "}"
        },
        {
            "Count": "// 'a'"
        },
        {
            "Count": "// b"
        },
        {
            "Count": "for (let [index, elem] of ['a', 'b'].entries()) {"
        },
        {
            "Count": "console.log(index, elem);"
        },
        {
            "Count": "}"
        },
        {
            "Count": "// 0 'a'"
        },
        {
            "Count": "// 1 'b'"
        },
        {
            "Count": "在for..of中如果遍历中途要退出，可以使用break退出循环"
        },
        {
            "Count": "如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历"
        },
        {
            "Count": "let letter = ['a', 'b', 'c'];"
        },
        {
            "Count": "let entries = letter.entries();"
        },
        {
            "Count": "console.log(entries.next().value); // [0, 'a']"
        },
        {
            "Count": "console.log(entries.next().value); // [1, 'b']"
        },
        {
            "Count": "console.log(entries.next().value); // [2, 'c']"
        }
    ]
}